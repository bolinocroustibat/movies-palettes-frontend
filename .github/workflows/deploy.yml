name: Deploy to prod when tag

on:
  push:
    tags:
      - '*'

jobs:
  bump-version:
    name: Bump version to ${{ github.ref_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Bump version in package.json to ${{ github.ref_name }}
        run: sed -E -i 's/"version":[[:space:]]"[0-9]+.[0-9]+.[0-9]+"/"version":\ "${{ github.ref_name }}"/g' ./package.json

      - name: Commit and push updated package.json
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          commit_message: "chore: bump version to ${{ github.ref_name }}"
          commit_user_name: Adrien Carpentier
          commit_user_email: me@adriencarpentier.com
          commit_author: Adrien Carpentier <me@adriencarpentier.com>

  build-and-deploy:
    name: Build and deploy ${{ github.ref_name }} to prod
    runs-on: ubuntu-latest
    needs: bump-version
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download movies DB to static directory
        run: |
          mkdir -p static
          wget -O static/movies.db '${{ vars.MOVIES_SQLITE_URL }}'

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ghcr.io/${{ github.repository }}:latest

      - name: Deploy to production
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on any error

            # Ensure directory exists
            mkdir -p "${{ secrets.SERVER_PATH }}"
            cd "${{ secrets.SERVER_PATH }}"

            # Clone or update the repository for configuration files
            if [ -d .git ]; then
              git fetch
              git reset --hard origin/main
            else
              git clone https://github.com/${{ github.repository }}.git .
            fi

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            # Set Docker image variables
            export GITHUB_REPOSITORY="${{ github.repository }}"
            export TAG="${{ github.ref_name }}"

            # Pull and deploy new version
            docker compose pull
            docker compose up -d --force-recreate app
            
            # Wait for app to be ready
            for i in {1..5}; do
              if curl -s "http://localhost:${APP_PORT:-3000}" > /dev/null; then
                echo "Application is up and running"
                exit 0
              fi
              echo "Waiting for application to start... (attempt $i/5)"
              sleep 2
            done
            echo "Error: Application failed to start"
            exit 1

      - name: Create Sentry release
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: "adrien-carpentier"
          SENTRY_PROJECT: "movies-palettes"
        with:
          environment: production
          release: ${{ github.ref_name }}
