name: Deploy to prod when tag

on:
  push:
    tags:
      - '*'

jobs:
  bump-version:
    name: Bump version to ${{ github.ref_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Bump version in package.json to ${{ github.ref_name }}
        run: sed -E -i 's/"version":[[:space:]]"[0-9]+.[0-9]+.[0-9]+"/"version":\ "${{ github.ref_name }}"/g' ./package.json

      - name: Commit and push updated package.json
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          commit_message: "chore: bump version to ${{ github.ref_name }}"
          commit_user_name: Adrien Carpentier
          commit_user_email: me@adriencarpentier.com
          commit_author: Adrien Carpentier <me@adriencarpentier.com>

  build-and-deploy:
    name: Build and deploy ${{ github.ref_name }} to prod
    runs-on: ubuntu-latest
    needs: bump-version
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download movies DB to static directory
        run: |
          mkdir -p static
          wget -O static/movies.db '${{ vars.MOVIES_SQLITE_URL }}'

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/movies-palettes:${{ github.ref_name }}
            ${{ secrets.DOCKERHUB_USERNAME }}/movies-palettes:latest

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Adding server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Configure Docker login on server
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo '${{ secrets.DOCKERHUB_TOKEN }}' | docker login -u '${{ secrets.DOCKERHUB_USERNAME }}' --password-stdin"

      - name: Deploy to production
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd ${{ secrets.SERVER_PATH }} && \
            set -a && source .env && set +a && \
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/movies-palettes:${{ github.ref_name }} && \
            docker stop movies-palettes || true && \
            docker rm movies-palettes || true && \
            docker run -d \
              --name movies-palettes \
              --restart unless-stopped \
              -p \${APP_PORT:-3000}:3000 \
              -v ./static:/app/static \
              -e VITE_ENV=production \
              -e PUBLIC_SENTRY_DSN=${{ secrets.PUBLIC_SENTRY_DSN }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/movies-palettes:${{ github.ref_name }}"

      - name: Test if deployed app responds
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd ${{ secrets.SERVER_PATH }} && \
            set -a && source .env && set +a && \
            if ! curl -s --retry 5 --retry-delay 2 http://localhost:\${APP_PORT:-3000} > /dev/null; then \
              echo 'Error: Deployed application is not responding' && \
              exit 1; \
            fi"

      - name: Create Sentry release
        uses: getsentry/action-release@v3
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: "adrien-carpentier"
          SENTRY_PROJECT: "movies-palettes"
        with:
          environment: production
          release: ${{ github.ref_name }}
